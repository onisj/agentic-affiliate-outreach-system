# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.11'

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt

#       - name: Run tests
#         run: pytest tests/

#   build-and-deploy:
#     needs: test
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Build, tag, and push Docker image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
#           IMAGE_TAG: latest
#         run: |
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#       - name: Deploy to EC2
#         env:
#           EC2_HOST_1: ${{ secrets.EC2_HOST_1 }}
#           EC2_HOST_2: ${{ secrets.EC2_HOST_2 }}
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
#           IMAGE_TAG: latest
#         run: |
#           echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
#           chmod 400 key.pem
#           for host in $EC2_HOST_1 $EC2_HOST_2; do
#             ssh -i key.pem -o StrictHostKeyChecking=no ec2-user@$host << 'EOF'
#               cd ~/app
#               echo "ECR_REGISTRY=$ECR_REGISTRY" >> .env
#               echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> .env
#               echo "IMAGE_TAG=$IMAGE_TAG" >> .env
#               aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
#               docker-compose pull
#               docker-compose up -d
#               docker image prune -f
#             EOF
#           done