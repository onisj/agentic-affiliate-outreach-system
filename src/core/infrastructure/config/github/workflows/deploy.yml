# name: Deploy Affiliate Outreach System

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# env:
#   DOCKER_IMAGE: affiliate-outreach-system
#   DOCKER_TAG: ${{ github.sha }}

# jobs:
#   test-backend:
#     runs-on: ubuntu-latest
#     services:
#       postgres:
#         image: postgres:14
#         env:
#           POSTGRES_USER: postgres
#           POSTGRES_PASSWORD: postgres
#           POSTGRES_DB: test_db
#         ports:
#           - 5432:5432
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#       redis:
#         image: redis:6
#         ports:
#           - 6379:6379
#         options: >-
#           --health-cmd "redis-cli ping"
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5

#     steps:
#     - uses: actions/checkout@v3

#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.11'
#         cache: 'pip'

#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt
#         pip install pytest pytest-cov pytest-asyncio

#     - name: Run backend tests
#       env:
#         DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
#         REDIS_URL: redis://localhost:6379/0
#         TESTING: true
#       run: |
#         pytest tests/ --cov=./ --cov-report=xml

#     - name: Upload coverage to Codecov
#       uses: codecov/codecov-action@v3
#       with:
#         file: ./coverage.xml
#         fail_ci_if_error: true

#   test-frontend:
#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v3

#     - name: Set up Node.js
#       uses: actions/setup-node@v3
#       with:
#         node-version: '18'
#         cache: 'npm'
#         cache-dependency-path: frontend/package-lock.json

#     - name: Install frontend dependencies
#       working-directory: frontend
#       run: npm ci

#     - name: Run frontend tests
#       working-directory: frontend
#       run: npm test -- --coverage

#     - name: Upload frontend coverage
#       uses: codecov/codecov-action@v3
#       with:
#         directory: frontend/coverage
#         fail_ci_if_error: true

#   lint:
#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v3

#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.11'
#         cache: 'pip'

#     - name: Set up Node.js
#       uses: actions/setup-node@v3
#       with:
#         node-version: '18'
#         cache: 'npm'
#         cache-dependency-path: frontend/package-lock.json

#     - name: Install Python dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install flake8 black isort mypy

#     - name: Install frontend dependencies
#       working-directory: frontend
#       run: npm ci

#     - name: Run Python linters
#       run: |
#         flake8 .
#         black . --check
#         isort . --check-only
#         mypy .

#     - name: Run frontend linters
#       working-directory: frontend
#       run: |
#         npm run lint
#         npm run type-check

#   build:
#     needs: [test-backend, test-frontend, lint]
#     runs-on: ubuntu-latest
#     if: github.event_name == 'push' && github.ref == 'refs/heads/main'

#     steps:
#     - uses: actions/checkout@v3

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v2

#     - name: Login to DockerHub
#       uses: docker/login-action@v2
#       with:
#         username: ${{ secrets.DOCKERHUB_USERNAME }}
#         password: ${{ secrets.DOCKERHUB_TOKEN }}

#     - name: Build and push Docker image
#       uses: docker/build-push-action@v4
#       with:
#         context: .
#         push: true
#         tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
#         cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:buildcache
#         cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:buildcache,mode=max

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
#     if: github.event_name == 'push' && github.ref == 'refs/heads/main'

#     steps:
#     - name: Deploy to production
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ secrets.DEPLOY_HOST }}
#         username: ${{ secrets.DEPLOY_USER }}
#         key: ${{ secrets.DEPLOY_KEY }}
#         script: |
#           cd /opt/affiliate-outreach
#           docker-compose pull
#           docker-compose up -d
#           docker system prune -f